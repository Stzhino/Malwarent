package Mob;

import Main.GamePanel;
import Main.Key;
import java.awt.*;
import java.io.IOException;
import java.util.ArrayList;
import java.awt.image.BufferedImage;

import javax.imageio.ImageIO;

import Items.Item;

public class Player extends Entity{
    private final int max_health;
    private GamePanel g;
    private Key k;
    private ArrayList<Missile> m = new ArrayList<>();
    private int coins;
    private ArrayList<Item> inv = new ArrayList<Item>();

    public Player(GamePanel g, Key k)
    {
        this.g = g;
        this.k = k;
        solidArea = new Rectangle(this.getX()-8, this.getY()+16, 32, 32);
        setDefault();
        getPlayerImage();
        setVisible(true);
        setHealth(4);
        max_health=4;
        setAtk(5);
        coins = 3;
    }

    public void setDefault()
    {
        super.setX(350);
        super.setY(250);
        super.setSpd(4);
        direction = "down";
    }

    public void getPlayerImage()
    {
        try
        {
            up1 = ImageIO.read(getClass().getResourceAsStream("/player/up_1.png"));
            up2 = ImageIO.read(getClass().getResourceAsStream("/player/up_2.png"));
            down1 = ImageIO.read(getClass().getResourceAsStream("/player/down_1.png"));
            down2 = ImageIO.read(getClass().getResourceAsStream("/player/down_2.png"));
            left1 = ImageIO.read(getClass().getResourceAsStream("/player/left_1.png"));
            left2 = ImageIO.read(getClass().getResourceAsStream("/player/left_2.png"));
            right1 = ImageIO.read(getClass().getResourceAsStream("/player/right_1.png"));
            right2 = ImageIO.read(getClass().getResourceAsStream("/player/right_2.png"));
        }
        catch(IOException e)
        {
            e.printStackTrace();
        }
    }

    public void update()
    {
        if(k.up() || k.down() || k.left() || k.right())
        {
            if(k.up())
            {
                direction = "up";
                y-=speed;
            }
            else if(k.down())
            {
                direction = "down";
                y+=speed;
            }
            else if(k.left())
            {
                direction = "left";
                x-=speed;
            }
            else if(k.right())
            {
                direction = "right";
                x+=speed;
            }
            
            solidArea = new Rectangle(this.getX(), this.getY(), 32, 32);

            spriteCounter++;
            if(spriteCounter>13)
            {
                if(spriteNum==1)
                {
                    spriteNum=2;
                }
                else if(spriteNum==2)
                {
                    spriteNum=1;
                }
                spriteCounter = 0;
            }
        }
        if(k.space() && g.getStart() && k.getInc()==1)
        {
            fire();
            k.resetInc();
        }
    }

    public void draw(Graphics2D gTwo)
    {   
        BufferedImage image = null;

        switch(direction)
        {
            case "up":
                if(spriteNum==1)
                {
                    image = up1;
                }
                else if(spriteNum==2)
                {
                    image = up2;
                }
                break;
            case "down":
                if(spriteNum==1)
                {
                    image = down1;
                }
                else if(spriteNum==2)
                {
                    image = down2;
                }
                break;
            case "left":
                if(spriteNum==1)
                {
                    image = left1;
                }
                else if(spriteNum==2)
                {
                    image = left2;
                }
                break;
            case "right":
                if(spriteNum==1)
                {
                    image = right1;
                }
                else if(spriteNum==2)
                {
                    image = right2;
                }
                break;
        }
        gTwo.drawImage(image, x, y, g.getTile(), g.getTile(), null);
    }

    public void fire()
    {
        m.add(new Missile(getX(), getY(), this));
    }

    public ArrayList<Missile> getMissiles()
    {
        return m;
    }

    public void updateCoin(int i)
    {
        coins+=i;
    }

    public int getCoin()
    {
        return coins;
    }

    public ArrayList<Item> inv()
    {
        return inv;
    }

    public void addToInv(Item e)
    {
        inv.add(e);
    }

    public void removeFromInv(Item e)
    {
        inv.remove(e);
    }

    public int returnMax()
    {
        return max_health;
    }
}
