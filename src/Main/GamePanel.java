package Main;

import java.awt.*;
import java.io.IOException;
import java.util.ArrayList;
import java.awt.image.BufferedImage;

import javax.imageio.ImageIO;
import javax.swing.JPanel;
import javax.swing.Timer;

import BgTiles.TileManager;
import Mob.Missile;
import Mob.Player;
import Mob.Virus;
import Object.SuperObject;

public class GamePanel extends JPanel implements Runnable{
    // screen dimensions
    final private int originalTileSize = 16;
    final private int scale = 3; // scales up the original tile size by this increment

    final private int tileSize = originalTileSize * scale;
    final private int maxScreenCol = 16; // 16 tiles horizontally
    final private int maxScreenRow = 12; // 12 tiles vertically
    final private int screenWidth = tileSize * maxScreenCol;
    final private int screenHeight = tileSize * maxScreenRow;

    private TileManager tileM = new TileManager(this);
    private Key keyH = new Key();
    private Thread gameThread;
    private AssetSetter a = new AssetSetter(this);
    private Player p = new Player(this, keyH);
    private BufferedImage backgroundImage;
    protected SuperObject[] obj = new SuperObject[10];
    private Mouse m = new Mouse(this);
    private ArrayList<Virus> v;
    private int[][] pos = new int[12][2];
    private int numVirus = 12;
    private boolean start = false;
    private int count = 0;
    private int roundCleared = 0;

    // fps
    private int FPS = 60;
    public GamePanel()
    {
        this.setPreferredSize(new Dimension(screenWidth, screenHeight));
        // this.setBackground(Color.blue);
        this.setDoubleBuffered(true);
        this.addKeyListener(keyH);
        this.setFocusable(true);
        try{
            backgroundImage = ImageIO.read(getClass().getResourceAsStream("/Background/windowsold.png"));
        }
        catch(IOException e)
        {
            e.printStackTrace();
        }
        this.addMouseListener(m);
    }

    public void setUpGame()
    {
        a.setObject();
    }

    public void startGameThread()
    {
        gameThread = new Thread(this);
        gameThread.start();
    }

    @Override
    public void run() 
    {
        double drawInterval = 1000000000/FPS;
        double delta = 0;
        long lastTime = System.nanoTime();
        long currentTime = 0;

        while(gameThread!=null)
        {
            currentTime = System.nanoTime();
            delta+=(currentTime-lastTime)/drawInterval;
            lastTime = currentTime;
            
            if(start && count==0)
            {
                startWaves();
                count++;
            }

            if(numVirus==0 && count==1)
            {
                beginIntermission();
                System.out.println("ROUND 2");
                count++;
            }

            if(delta>=1)
            {
                update();
                repaint();
                delta--;
            }

            if(numVirus==0)
            {
                roundCleared++;
                numVirus++;
                System.out.println(roundCleared);
            }

            if(roundCleared == 2)
            {
                PopupGen p = new PopupGen("YOU WIN");
                gameThread = null;
            }

        }
    }

    public void update()
    {
        p.update();
        updateMissiles();
    }

    public void paintComponent(Graphics g)
    {
        super.paintComponent(g);

        Graphics2D gTwo = (Graphics2D)g;
        
        g.drawImage(backgroundImage, 0, 0, null);

        for(int i = 0; i<obj.length; i++)
        {
            if(obj[i]!=null)
            {
                obj[i].draw(gTwo, this);
            }
        }

        tileM.draw(gTwo);

        p.draw(gTwo);

        if(start)
        {
            for(Virus i : v)
            {
                if(i.getVisible())
                {
                    i.update();
                    i.move();
                    i.draw(gTwo);
                    checkCollisions();
                }
            }
            for(int a = 0; a<p.getMissiles().size(); a++)
            {
                if(p.getMissiles().get(a).getVisible())
                {
                    p.getMissiles().get(a).draw(gTwo);
                }
            }
        }

        gTwo.dispose();
    }

    public void checkCollisions() {

        Rectangle r3 = p.getSolid();
        for(int i = 0; i<v.size(); i++)
        {
            Rectangle r2 = v.get(i).getSolid();

            if(r3.intersects(r2))
            {
                if(v.get(i).getDmg())
                {
                    p.changeHealth(-1);
                    numVirus--;
                }
                v.get(i).setVisible(false);
                v.get(i).stopDmg();
                if(p.getHealth()==0)
                {
                    start = false;
                    System.out.println("GAME OVER.");
                    System.exit(0);
                }
            }
        }

        ArrayList<Missile> mm = p.getMissiles();
        for(int i = 0; i<mm.size(); i++)
        {
            Rectangle r = mm.get(i).getSolid();
            for(int j = 0; j<v.size(); j++)
            {
                if(v.get(j).getVisible())
                {
                    Rectangle r2 = v.get(j).getSolid();
                    if(r.intersects(r2))
                    {
                        if(mm.get(i).getVisible())
                        {
                            v.get(j).changeHealth(-p.getAtk());
                            mm.get(i).setVisible(false);
                        }
                        if(v.get(j).getHealth()==0)
                        {
                            v.get(j).setVisible(false);
                            v.get(j).stopDmg();
                            p.updateCoin(2);
                            numVirus--;
                            System.out.println("Num remaining: " + numVirus);
                        }
                    }
                }
            }
        }
    }

    public int getTile()
    {
        return tileSize;
    }

    public int getScreenH()
    {
        return screenHeight;
    }

    public SuperObject[] getSO()
    {
        return obj;
    }

    public void initiate()
    {
        start = true;
    }

    public boolean getStart()
    {
        return start;
    }

    public void startWaves()
    {
        for(int i = 0; i<pos.length; i++)
        {
            pos[i][0]=ranX();
            pos[i][1]=ranY();
        }
        v = new ArrayList<Virus>();
        for(int i = 0; i<pos.length; i++)
        {
            v.add(new Virus(this, pos[i][0], pos[i][1]));
        }
        numVirus = 12;
    }

    public int ranX()
    {
        int i = (int) (Math.random()*750);
        while(i<370 && i>330)
        {
            i = (int) (Math.random()*750);
        }
        return(i);
    }

    public int ranY()
    {
        int i = (int) (Math.random()*500);
        while(i<270 && i>230)
        {
            i = (int) (Math.random()*500);
        }
        return i;
    }

    private void updateMissiles() 
    {
        ArrayList<Missile> ms = p.getMissiles();

        for (int i = 0; i < ms.size(); i++) 
        {
            Missile m = ms.get(i);

            if (m.getVisible()) 
            {
                if(m.getS().equals("left"))
                {
                    m.Lmove();
                }
                else if(m.getS().equals("right"))
                {
                    m.Rmove();
                }
            } 
            else 
            {
                ms.remove(i);
            }
        }
    }

    private void beginIntermission()
    {
        Timer t = new Timer(80000, e -> startWaves());
        t.start();
        t.setRepeats(false);
    }

    public TileManager getT()
    {
        return tileM;
    }

    public Player getP()
    {
        return p;
    }
}
