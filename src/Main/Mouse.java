package Main;

import java.util.*;
import java.awt.*;

import java.awt.event.MouseEvent;
import java.util.ArrayList;

import javax.swing.event.MouseInputListener;

import Items.Item;

public class Mouse implements MouseInputListener{
    private GamePanel g;
    private Item hp = new Item("Weak Health Pot", 5, 1, 3, true);
    private Item betterHp = new Item("Mediocre Health Pot", 3, 2, 6, true);
    private Item bestHp = new Item("Strong Health Pot", 1, 3, 10, true);
    private Item basicEnhance = new Item("Basic Enhancement", 3, 2, 5, false);
    private Item mediumEnhance = new Item("Medium Enhancement", 3, 5, 11, false);
    private Item highEnhance = new Item("High Enhancement", 1, 10, 20, false);
    private ArrayList<Item> shop = new ArrayList<Item>(); 

    public Mouse(GamePanel g)
    {
        this.g = g;
        shop.add(hp);
        shop.add(betterHp);
        shop.add(bestHp);
        shop.add(basicEnhance);
        shop.add(mediumEnhance);
        shop.add(highEnhance);
    }

    @Override
    public void mouseClicked(MouseEvent e) {
        for(int i = 0; i<g.getSO().length; i++)
        {
            if(g.getSO()[i]!=null)
            {
                Rectangle r = new Rectangle(g.getSO()[i].getX(), g.getSO()[i].getY(), 48, 48);
                if(r.contains(e.getPoint()))
                {
                    if(i==0 || i==1)
                    {
                        PopupGen p = new PopupGen("Folder. Status: Good.");
                        break;
                    }
                    else if(i==2)
                    {
                        PopupGen p = new PopupGen("Gxxgle Chrxme. Status: Good.");
                        break;
                    }
                    else if(i==3)
                    {
                        PopupGen p = new PopupGen("Garbage Bin. Status: Good.");
                        break;
                    }
                    else if(i==5)
                    {
                        PopupGen p = new PopupGen("Music Player. Status: Good.");
                        break;
                    }
                    else if(i==6)
                    {
                        PopupGen p = new PopupGen("Game. Status: Good.");
                        break;
                    }
                    else if(i==7)
                    {
                        PopupGen p = new PopupGen("Shopping Cart. Status: Good.");
                        break;
                    }
                    else
                    {
                        PopupGen p = new PopupGen("The file is corrupt and cannot be opened.");
                        g.initiate();
                        break;
                    }
                }
            }
        }
        for(int i = 0; i<g.getT().getTile().length; i++)
        {
            if(g.getT().getTile()[i]!=null)
            {
                Rectangle r = new Rectangle(g.getT().getTile()[i].getX(), g.getT().getTile()[i].getY(), 48, 48);
                if(r.contains(e.getPoint()))
                {
                    if(i==1)
                    {
                        System.out.println("Welcome to Shop.");
                        System.out.println("You current have: " + g.getP().getCoin()+ " coins.");
                        System.out.println("These are the items available for purchase.");
                        Scanner s = new Scanner(System.in);
                        boolean shopping = true;
                        while(shopping)
                        {
                            for(int j = 0; j<shop.size(); j++)
                            {
                                System.out.print("(" + j + ") ");
                                System.out.println(shop.get(j));
                                System.out.println();
                            }
                            System.out.println("What what you like to do? (1)Buy or (2)Sort");
                            int ans = s.nextInt();
                            if(ans==2)
                            {
                                System.out.println("(1)Alphabetically or by (2)Cost?");
                                ans = s.nextInt();
                                if(ans == 1)
                                {
                                    AlphabeticalArrLSelectionS(shop);
                                }
                                if(ans == 2)
                                {
                                    AscendingArrLInsertionS(shop);
                                }
                            }
                            else
                            {
                                System.out.println("What would you like to purchase? (Input corresponding number or type -1 to exit the shop)");
                                ans = s.nextInt();
                                int selectedItem = ans;
                                if(ans==-1)
                                {
                                    System.out.println("You leave the shop.");
                                    break;
                                }
                                else if(shop.get(selectedItem).getAmt()==0)
                                {
                                    System.out.println("None in stock");
                                    shop.remove(selectedItem);
                                }
                                else if(shop.get(ans).getCost()>g.getP().getCoin())
                                {
                                    int needed = shop.get(selectedItem).getCost() - g.getP().getCoin();
                                    System.out.println("You don't have enough money. You're missing " + needed + " coins");
                                }
                                else
                                {
                                    System.out.println("How many " + shop.get(selectedItem).getName() + "[s] would you like to buy?");
                                    ans = s.nextInt();
                                    if(ans == -1)
                                    {
                                        System.out.println("Leaving shop.");
                                        break;
                                    }
                                    else if(shop.get(selectedItem).getCost()*ans>g.getP().getCoin())
                                    {
                                        while(shop.get(selectedItem).getCost()*ans>g.getP().getCoin() && ans!=-1)
                                        {
                                            System.out.println("You don't have enough money.");
                                            System.out.println("Enter a smaller value. (Enter -1 to leave)");
                                            ans = s.nextInt();
                                        }
                                        if(ans==-1)
                                        {
                                            System.out.println("Leaving shop.");
                                            break;
                                        }
                                    }
                                    System.out.println("You bought " + ans + " items.");
                                    shop.get(selectedItem).updateAmt(-ans);
                                    g.getP().updateCoin(-shop.get(selectedItem).getCost()*ans);
                                    if(check(g.getP().inv(), shop.get(selectedItem)))
                                    {
                                        g.getP().inv().get(getIdx(g.getP().inv(), shop.get(selectedItem))).updateAmt(ans);
                                    }
                                    else
                                    {
                                        g.getP().inv().add(new Item(shop.get(selectedItem).getName(), ans, shop.get(selectedItem).getValue(), shop.get(selectedItem).isHP()));
                                    }
                                }
                            }
                        }
                    }
                    if(i==2)
                    {
                        Scanner s = new Scanner(System.in);
                        System.out.println("Welcome to your inventory.");
                        if(g.getP().inv().size()==0)
                        {
                            System.out.println("There's nothing in your inventory at the moment.");
                            break;
                        }
                        boolean repeat = true;
                        while(repeat)
                        {
                            for(int j = 0; j<g.getP().inv().size(); j++)
                            {
                                System.out.print("(" + j + ") ");
                                System.out.println(g.getP().inv().get(j));
                                System.out.println();
                            }
                            System.out.println("Which item would you like to use? (-1 to exit)");
                            int ans = s.nextInt();
                            if(ans == -1)
                            {
                                System.out.println("Exited");
                                break;
                            }
                            if(g.getP().inv().get(ans).isHP()==true)
                            {
                                if(g.getP().getHealth()==g.getP().returnMax())
                                {
                                    System.out.println("You are already at max health. Cannot be increased further.");
                                }
                                else
                                {
                                    System.out.println("Item used.");
                                    g.getP().changeHealth(g.getP().inv().get(ans).getValue());
                                    if(g.getP().getHealth()>g.getP().returnMax())
                                    {
                                        g.getP().setHealth(g.getP().returnMax());
                                    }
                                    System.out.println("You now have " + g.getP().getHealth() + " health.");
                                }
                            }
                            else if(g.getP().inv().get(ans).isHP()==false)
                            {
                                System.out.println("Item used.");
                                g.getP().changeAtk(g.getP().inv().get(ans).getValue());
                                System.out.println("You now have " + g.getP().getAtk() + " attack.");
                            }
                            g.getP().inv().get(ans).updateAmt(-1);
                            if(g.getP().inv().get(ans).getAmt()==0)
                            {
                                g.getP().inv().remove(ans);
                            }
                        }
                    }
                }
            }
        }
    }

    public boolean check(ArrayList<Item> a, Item ii)
    {
        for(Item i : a)
        {
            if(i.equals(ii))
            {
                return true;
            }
        }
        return false;
    }

    public int getIdx(ArrayList<Item> a, Item ii)
    {
        for(int i = 0; i<a.size(); i++)
        {
            if(a.get(i).equals(ii))
            {
                return i;
            }
        }
        return -1;
    }

    public static ArrayList<Item> AlphabeticalArrLSelectionS(ArrayList<Item> a)
    {
        for(int i = 0; i<a.size()-1; i++)
        {
        int andex = i;
        for(int j = i+1; j<a.size(); j++)
        {
            if(a.get(j).getName().compareToIgnoreCase(a.get(andex).getName())<0)
            {
                andex = j;
            }
        }
        if(i!=andex)
        {
            a.set(i, a.set(andex, a.get(i)));
        }
        }
        return a;
    }

    public static ArrayList<Item> AscendingArrLInsertionS(ArrayList<Item> a)
    {
        for(int i = 1; i<a.size(); i++)
        {
            Item min = a.get(i);
            int j = i-1;
        while(j>=0 && a.get(j).getCost()>min.getCost())
        {
            a.set(j+1, a.get(j));
            j--;
        }
        a.set(j+1, min);
        }
        return a;
    }

    @Override
    public void mousePressed(MouseEvent e) {
        // TODO Auto-generated method stub
        
    }

    @Override
    public void mouseReleased(MouseEvent e) {
        // TODO Auto-generated method stub
        
    }

    @Override
    public void mouseEntered(MouseEvent e) {
        // TODO Auto-generated method stub
        
    }

    @Override
    public void mouseExited(MouseEvent e) {
        // TODO Auto-generated method stub
        
    }

    @Override
    public void mouseDragged(MouseEvent e) {
        // TODO Auto-generated method stub
        
    }

    @Override
    public void mouseMoved(MouseEvent e) {
        // TODO Auto-generated method stub
        
    }
    
}
